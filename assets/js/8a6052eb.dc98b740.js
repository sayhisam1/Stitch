"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63],{47282:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),r=["components"],s={sidebar_position:3},l="Getting Started",c={unversionedId:"GettingStarted",id:"GettingStarted",isDocsHomePage:!1,title:"Getting Started",description:"Stitch is a simple and powerful Entity Component System (ECS) built specifically for Roblox game development.",source:"@site/docs/GettingStarted.md",sourceDirName:".",slug:"/GettingStarted",permalink:"/Stitch/docs/GettingStarted",editUrl:"https://github.com/sayhisam1/Stitch/edit/master/docs/GettingStarted.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/Stitch/docs/Installation"},next:{title:"FAQ",permalink:"/Stitch/docs/FAQ"}},d=[],p={toc:d};function m(t){var e=t.components,n=(0,o.Z)(t,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting Started"),(0,i.kt)("h1",{id:"what-is-stitch"},"What is Stitch?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Stitch")," is a simple and powerful ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Entity_component_system"},"Entity Component System (ECS)")," built specifically for Roblox game development. "),(0,i.kt)("p",null,"Stitch allows you to separate the ",(0,i.kt)("strong",{parentName:"p"},"data")," and ",(0,i.kt)("strong",{parentName:"p"},"behavior")," of things in your game. This means your code will be easier to understand and update, and more performant."),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Follow the ",(0,i.kt)("a",{parentName:"p",href:"/Stitch/docs/Installation"},"installation guide")," to install Stitch. "),(0,i.kt)("h1",{id:"basic-usage"},"Basic Usage"),(0,i.kt)("p",null,"The basic pattern behind Stitch is to create a single script on the server and a single script on the client. Both scripts will do the same thing - create a new World and register some Systems and Components to it. "),(0,i.kt)("p",null,"Here's what the simplest example of creating a world would look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Change this if you installed Stitch to a different folder\nlocal Stitch = require(game:GetService("ReplicatedStorage").Packages.Stitch) \n\nlocal world = Stitch.World.new()\n')),(0,i.kt)("p",null,"We would need to have this code on both the server and client. "),(0,i.kt)("h1",{id:"entities"},"Entities"),(0,i.kt)("p",null,"An entity is anything in your game. It could be a part, a NPC, or a weapon. Entities can have multiple Components attached to them. Stitch automatically treats Roblox instances as entities, so you don't have to do anything special to use them."),(0,i.kt)("h1",{id:"registering-a-new-component"},"Registering a new Component"),(0,i.kt)("p",null,"A Component is a way to store data for one aspect of an entity. For example, a ",(0,i.kt)("inlineCode",{parentName:"p"},"Zombie")," npc in your game may have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Health")," component, as well as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Damage")," component. In Stitch, components should ",(0,i.kt)("strong",{parentName:"p"},"only be used for data"),". "),(0,i.kt)("p",null,"Before they can be used, Components must be registered. Here's how to register a simple Component to the world:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Stitch = require(game:GetService("ReplicatedStorage").Packages.Stitch)\n\nlocal world = Stitch.World.new()\n\n-- Registers a simple component called "velocity" to the world\nworld:registerComponent({\n    name = "velocity"\n})\n')),(0,i.kt)("p",null,"Now that we have registered a component, we can now attach it to instances. Let's say you had a part named ",(0,i.kt)("inlineCode",{parentName:"p"},"Arrow")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Workspace"),". We can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"velocity")," component like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Add a velocity component to Arrow:\nworld:addComponent("velocity", Workspace.Arrow, {\n    value = Vector3.new(0, 0, 0)\n})\n\n-- Get the velocity component from Arrow:\narrowVelocity = world:getComponent("velocity", Workspace.Arrow)\nprint(arrowVelocity.value) -- prints Vector3.new(0, 0, 0)\n\n-- Set the data of the component to something else:\nworld:setComponent("velocity", Workspace.Arrow, {\n    value = Vector3.new(1, 0, 0)\n})\n')),(0,i.kt)("h1",{id:"adding-a-system"},"Adding a System"),(0,i.kt)("p",null,"We can now associate behavior with the ",(0,i.kt)("inlineCode",{parentName:"p"},"velocity")," component using a System. A System is a way to associate behavior to one or many components. A key idea of the ECS pattern is that Systems should not store any state themselves; Data should only be store on Components, and behavior should be handled by Systems."),(0,i.kt)("p",null,"We previously defined a ",(0,i.kt)("inlineCode",{parentName:"p"},"velocity")," component, and attached it to an Arrow. Let's now define a system that moves anything with the ",(0,i.kt)("inlineCode",{parentName:"p"},"velocity")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- add a new system to the world that moves all instances with a velocity component\nworld:addSystem({\n    name = "VelocitySystem",\n    onUpdate = function(world, dt) -- onUpdate is passed the world and time since last update\n        -- query to iterate through all entities with a velocity component\n        world:createQuery():all("velocity"):forEach(function(instance, velocityData)\n            instance.Position = instance.Position + velocityData.value * dt\n        end)\n    end\n})\n')),(0,i.kt)("p",null,"If you run the game now, you should see that anything with a ",(0,i.kt)("inlineCode",{parentName:"p"},"velocity")," component is moving."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"\u2757 To take full advantage of everything Stitch can do, it is recommended you keep each System and Component in a different ",(0,i.kt)("inlineCode",{parentName:"th"},"ModuleScript"),". When adding systems or registering components, the methods can directly take a ModuleScript, which is required for HotReloading functionality. Please take a look at a more ",(0,i.kt)("a",{parentName:"th",href:"https://github.com/sayhisam1/Stitch/tree/master/examples/tetris"},"advanced example")," to see how this would look in practice.")))))}m.isMDXComponent=!0}}]);